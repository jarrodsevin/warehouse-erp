generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id        String    @id @default(cuid())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model Subcategory {
  id        String    @id @default(cuid())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model Brand {
  id        String    @id @default(cuid())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model Vendor {
  id          String   @id @default(cuid())
  name        String
  contactName String?
  email       String?
  phone       String?
  terms       String?
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  purchaseOrders PurchaseOrder[]
}

model Customer {
  id                String        @id @default(cuid())
  name              String
  email             String?
  phone             String?
  address           String?

  customerGroup     String
  customerCategory  String

  creditLimit       Float         @default(0)
  currentBalance    Float         @default(0)
  paymentTerms      String?

  status            String        @default("active")
  notes             String?

  salesOrders       SalesOrder[]
  payments          Payment[]

  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
}

model Product {
  id                String        @id @default(cuid())
  sku               String        @unique
  name              String
  description       String?
  cost              Float
  retailPrice       Float
  floorPrice        Float?        // Minimum selling price (cost * 1.15)
  categoryId        String
  category          Category      @relation(fields: [categoryId], references: [id])
  subcategoryId     String?
  subcategory       Subcategory?  @relation(fields: [subcategoryId], references: [id])
  brandId           String?
  brand             Brand?        @relation(fields: [brandId], references: [id])
  unitOfMeasurement String?
  packageSize       Float?
  casePackCount     Int?
  storageType       String?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  purchaseOrderItems PurchaseOrderItem[]
  salesOrderItems   SalesOrderItem[]
  changeLogs        ProductChangeLog[]
  inventory         Inventory?
}

model ProductChangeLog {
  id          String   @id @default(cuid())
  productId   String
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  changeType  String
  oldCost     Float?
  newCost     Float?
  oldRetail   Float?
  newRetail   Float?
  oldMargin   Float?
  newMargin   Float?
  oldDescription String?
  newDescription String?
  changedAt   DateTime @default(now())

  @@index([productId])
  @@index([changedAt])
}

model Inventory {
  id              String   @id @default(cuid())
  productId       String   @unique
  product         Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantityOnHand  Int      @default(0)
  reorderLevel    Int      @default(0)
  reorderQuantity Int      @default(0)
  currentCost     Float    @default(0)
  lastCostUpdate  DateTime?
  lastRestocked   DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([productId])
}

model PurchaseOrder {
  id            String              @id @default(cuid())
  poNumber      String              @unique
  vendorId      String
  vendor        Vendor              @relation(fields: [vendorId], references: [id])
  orderDate     DateTime            @default(now())
  expectedDate  DateTime?
  receivedDate  DateTime?
  status        String              @default("pending")
  notes         String?
  items         PurchaseOrderItem[]
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
}

model PurchaseOrderItem {
  id              String        @id @default(cuid())
  purchaseOrderId String
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  productId       String
  product         Product       @relation(fields: [productId], references: [id])
  quantity        Int
  unitCost        Float
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model SalesOrder {
  id                String            @id @default(cuid())
  soNumber          String            @unique

  customerId        String
  customer          Customer          @relation(fields: [customerId], references: [id])

  orderDate         DateTime          @default(now())

  status            String            @default("fulfilled")

  subtotal          Float
  total             Float

  notes             String?

  // NEW: Order Acceptance Fields
  orderAccepted     Boolean           @default(false)
  printedName       String?
  signature         String?           @db.Text
  acceptedAt        DateTime?

  items             SalesOrderItem[]

  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
}

model SalesOrderItem {
  id                String        @id @default(cuid())

  salesOrderId      String
  salesOrder        SalesOrder    @relation(fields: [salesOrderId], references: [id], onDelete: Cascade)

  productId         String
  product           Product       @relation(fields: [productId], references: [id])

  quantity          Int
  unitPrice         Float
  lineTotal         Float

  createdAt         DateTime      @default(now())
}

model Payment {
  id                String        @id @default(cuid())

  customerId        String
  customer          Customer      @relation(fields: [customerId], references: [id])

  amount            Float
  paymentDate       DateTime      @default(now())
  paymentMethod     String?
  referenceNumber   String?

  notes             String?

  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
}
